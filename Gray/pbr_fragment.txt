#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in vec3 Color;

int MAX_LIGHTS = 100;

struct Material
{
	vec3 color;
	bool metal;
	float roughness;
};

struct PbrLight{
	bool initialized;
	vec3 position;
	vec3 intensity;
	vec3 color;
	bool directional;
};

uniform vec3 eyePosition;
uniform sampler2D diffuseMap;
uniform Material material;
uniform int containsTexture;
uniform int numLights;
uniform Light lights[MAX_LIGHTS];

vec3 schlickFresnel(Material material, vec3 lightDir, vec3 halfWay)
{
	vec3 F0;
	if(material.metal)
	{
		F0 = material.color;
	}else{
		F0 = vec3(0.04);
	}
	return F0+(1-F0)*pow(1.0-dot(lightDir, halfWay),5);
}
float geomSmith(Material material, vec3 normal, vec3 view){
	float k = (Material.roughness+1.0)*(Material.roughness+1.0)/8.0;
	float dotProd = dot(normal, view);
	return dotProd/(dotProd*(1-k)+k);
}

float ggxDistribution(Material material, float nDotH)
{
	float alpha2 = pow(Material.rough,4);
	float d = (nDotH*nDotH)*(alpha2-1)+1;
	return alpha2 /(PI*d*d);
}

vec3 calcRadiance(Material material, Light light, vec3 normal, vec3 fragPos, vec3 eyeVec){
	float lightIntensity = light.intensity;
	vec3 color = vec3(0.0);
	if(!material.metal){
		color = material.color;
	}
	vec3 halfway = light.position+eyePos;
	halfway=halfway/length(halfway); // normalize
	vec3 fresnel = schlickFresnel(material, lightDir, halfway);
	float geo = geomSmith(material, normal, eyePos);
	float ndf = ggxDistribution(material, dot(normal, halfway));
	vec3 specular = 0.25*dot(normal, lightDir)*(normal*eyeVec)*fresnel*geo*ndf;
	vec3 diffuse = light.color;
	float incomingRadiance = lightIntensity;
	if(!light.directional)
	{
		//It isn't a directional light
		float attenuation = pow(length(light.position-fragPos),2);  //TODO: A better attenuation
		incomingRadiance = incomingRadiance/attenuation;
	}
	return (specular*PI + diffuse)*incomingRadiance*dot(normal, lightDir);
}


void main()
{  
	vec3 normal = normalize(Normal);
	vec3 outColor = vec3(0.0);
	vec3 eyeVec = eyePosition - FragPos;
	for(int i=0;i<numLights;i++)
	{
		outColor += calcRadiance(material, lights[i], normal, FragPos, eyeVec);
	}
	FragColor = outCOlor;
}
