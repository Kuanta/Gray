#version 330 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in vec3 debugColor;
in vec3 Color;
flat in int faulty;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct AmbientLight
{
	vec3 color;
	float intensity;
};

struct DirectionalLight
{
	vec3 color;
	vec3 direction;
	float intensity;
};

struct PointLight
{
	vec3 color;
	float intensity;
	vec3 position;
	float constant;
	float linear;
	float quadratic;
};

struct Light
{
	vec3 color;
	float intensity;

};
layout (std140, binding=1) uniform Lights
{
	
};
uniform vec3 eyePosition;
uniform sampler2D diffuseMap;
uniform Material material;
uniform AmbientLight ambientLight;
uniform DirectionalLight directionalLight;
uniform PointLight pointLight;
uniform int containsTexture;

vec3 calcAmbientLight(AmbientLight light);
vec3 calcDirectionalLight(DirectionalLight light, Material material, vec3 normal,vec3 fragPos,vec3 viewDir);
vec3 calcPointLight(PointLight light, Material material, vec3 normal,vec3 fragPos,vec3 viewDir);

void main()
{  
	vec3 normal = normalize(Normal);
	vec4 ambientColor = vec4(ambientLight.color, 1.0f) * ambientLight.intensity;
	
	//Directional Light
	vec4 dirColor = vec4(calcDirectionalLight(directionalLight, material, normal, FragPos, eyePosition),1.0f);

	//PointLight 
	vec4 pointColor = vec4(calcPointLight(pointLight, material, normal, FragPos, eyePosition), 1.0f);

	if(containsTexture == 1)
	{
		FragColor = texture(diffuseMap, TexCoords) * (ambientColor+dirColor+pointColor);
	}
	else
	{
		FragColor = vec4(material.diffuse,1)* (ambientColor+dirColor+pointColor);
	}

	if(faulty == 1)
	{
		FragColor = vec4(1.0f, 0.0f, 0.0f, 0.0f);
	}
	
    
	
}
vec3 calcDirectionalLight(DirectionalLight light, Material material, vec3 normal,vec3 fragPos,vec3 eyePos)
{
	vec3 viewDir = normalize(eyePos - fragPos);
	vec3 reflectDir = normalize(reflect(-normalize(light.direction), normal)); //Bling-Phong

	//Ambient
	vec3 ambientColor; //= light.color*light.intensity;

	//Diffuse
	float diffuseFactor = max(dot(normal, -normalize(light.direction)),0.0f);
	vec3 diffuseColor = light.color*light.intensity*diffuseFactor;

	//Specular
	float specularFactor = pow(max(dot(-viewDir, reflectDir), 0.0f), material.shininess);
	vec3 specularColor = light.color*light.intensity*specularFactor;

	return(ambientColor+diffuseColor+specularColor);
}
vec3 calcPointLight(PointLight light, Material material, vec3 normal,vec3 fragPos,vec3 eyePos)
{
	vec3 viewDir = normalize(eyePos - fragPos);
	vec3 lightDir = normalize(light.position - fragPos);
	vec3 halfway = normalize(viewDir+lightDir);  //Blinn-Phong Model
	vec3 ambientColor,diffuseColor,specularColor;
	float diff=max(dot(normal,lightDir),0.0);
	vec3 reflectDir=reflect(-lightDir,normal);

	//float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	float spec=pow(max(dot(normal, halfway),0.0),material.shininess);
	float distance=length(light.position-fragPos);
	float attenuation=1.0/(light.constant+light.linear*distance+light.quadratic*(distance*distance));
	
	//ambientColor = light.color*light.intensity*attenuation;
	diffuseColor = light.color*diff*light.intensity*attenuation;
	specularColor = light.color*light.intensity*spec*attenuation;
	
	return(ambientColor+diffuseColor+specularColor);
}
