#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aUvs;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 8) in vec3 aColor;

out vec3 Normal;
out vec3 FragPos;
out vec2 TexCoords;
out vec3 Color;
flat out int faulty;


uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform int hasBones;
const int MAX_BONES=100;
const int NUM_BONES_PER_VERTEX=4;
uniform mat4 gBones[MAX_BONES];

void main()
{
	mat4 boneMatrix=mat4(1.0);
	
	float weights = 0;
	float totalWeights = 0;
	if(hasBones != 0)
	{
		for(int i=0;i<NUM_BONES_PER_VERTEX;i++)
		{
			if(boneIDs[i] > 0)
			{

				boneMatrix += gBones[boneIDs[i]]*boneWeights[i];
			}
		}
	}
	else{
		boneMatrix = mat4(1);
	}
	
	gl_Position = projection * view * model * boneMatrix * vec4(aPos, 1.0);
	Normal=mat3(transpose(inverse(model * boneMatrix)))*aNormal;
	FragPos=vec3(model*vec4(aPos,1.0));
	TexCoords = aUvs;
	Color = aColor;
	faulty = 0;
}