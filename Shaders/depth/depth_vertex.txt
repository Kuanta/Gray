#version 420 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aUvs;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 8) in vec3 aColor;

uniform mat4 lightMatrix;
uniform mat4 model;

uniform int hasBones;
const int MAX_BONES=100;
const int NUM_BONES_PER_VERTEX=4;
uniform mat4 gBones[MAX_BONES];

void main()
{

	if(hasBones == 1)
	{
		mat4 boneMatrix=mat4(0.0);
		boneMatrix[3][3] = 1.0;
		
		float weights = 0;
		float totalWeights = 0;

		for(int i=0;i<NUM_BONES_PER_VERTEX;i++)
		{
			if(boneIDs[i] >= 0)
			{
				totalWeights += boneWeights[i];
			}
		}
		if(totalWeights > 0)
		{
			for(int i=0;i<NUM_BONES_PER_VERTEX;i++)
			{
				if(boneIDs[i] >= 0)
				{
					boneMatrix += gBones[boneIDs[i]]*boneWeights[i] / totalWeights;
				}else{
					break;
				}
			}
		}
		boneMatrix = boneMatrix / boneMatrix[3][3];
		gl_Position = lightMatrix *  model *  boneMatrix * vec4(aPos, 1.0);
	}else{
		gl_Position = lightMatrix * model * vec4(aPos, 1.0);
	}
	
}  