#version 420 core
#define PI 3.14
#define MAX_NUM_LIGHTS 100
out vec4 FragColor;

  
in vec2 TexCoords;
layout(binding=0) uniform sampler2D gPositions;
layout(binding=1) uniform sampler2D gNormals;
layout(binding=2) uniform sampler2D gColors;
layout(binding=3) uniform sampler2D gPbr;

struct Material
{
	vec3 color;
	float shininess;
	bool metal;
	float roughness;
};

//Light types
const int AMBIENT_LIGHT = 0;
const int DIRECTIONAL_LIGHT = 1;
const int POINT_LIGHT = 2;

struct Light
{
	mat4 lightMatrix;  //For directional
	vec4 color;		//4*4 = 16
	vec4 position;  //4*4 = 32
	vec4 direction;	//4*4 = 48
	int type;	//4
	float intensity;	//4 
	float constant;	//4
	float linear;	//4
	float quadratic;	//4
	int castShadow;
	float far_plane;
	float attenuationFactor;
	//Total: 48+20 = 68 (Must be a multiple of 16, so ve set it to 16*5=80, LOSS OF 12 BYTES)
};

float geomSchlick(Material material, vec3 normal, float dotProd, float roughness);
float geomSmith(Material material, vec3 normal, vec3 view, vec3 halfway);
vec3 schlickFresnel(Material material, vec3 lightDir, vec3 halfWay);
float ggxDistribution(Material material, float nDotH);
vec3 calcRadiance(Material material, Light light, vec3 normal, vec3 fragPos, vec3 viewDir);
float shadowCalculation();

layout (std140, binding=1) uniform Lights
{
	Light allLights[MAX_NUM_LIGHTS]; //144*MAX_NUM_LIGHTS
	int numLights; //Current number of lights in the scene //4
	//Total: 144*MAX_NUM_LIGHTS+4
};

//Uniform matrices
layout (std140, binding=0) uniform Matrices
{
	mat4 view;		//16*4 bytes
	mat4 projection;	//16*4 bytes
	vec3 eyePosition;	//3*4
						//Total: 16*8+12
};

//Shadows

layout(binding=5) uniform sampler2DArrayShadow dynamicShadowMaps;
layout(binding=6) uniform samplerCubeArray dynamicPointShadowMaps;
layout(binding=7) uniform sampler2DArrayShadow shadowMaps; //TODO: The binding point may change in future
layout(binding=8) uniform samplerCubeArray pointShadowMaps;

void main()
{

    vec3 fragPos = texture(gPositions, TexCoords).rgb;
    vec3 normal = texture(gNormals, TexCoords).rgb;
    vec3 diffuse = texture(gColors, TexCoords).rgb;
    vec3 eyeVec = normalize(eyePosition - fragPos);

	if(normal.x + normal.y + normal.z == 0)
	{
		//This is skybox
		FragColor = vec4(diffuse,1);
		return;
	}
    Material mat;
    mat.color = diffuse;
    mat.metal = false;
    mat.roughness = texture(gPbr, TexCoords).r * 100; 

    vec3 illumination = vec3(0.0);
	int directLightIndex = 0;
	int pointLightIndex = 0;
	float shadow ;
    for (int i=0; i<numLights; i++)
    {
        Light currLight = allLights[i];
		if(currLight.castShadow == 1)  //Light must cast shadow and object must receive it
		{
			if(currLight.type == 1)
			{
				//Check Shadow
				vec4 projCoords_ = (currLight.lightMatrix*vec4(fragPos,1.0));
				vec3 projCoords = projCoords_.xyz/projCoords_.w;
				projCoords = projCoords*0.5 + 0.5;
				float closestDepth = texture(shadowMaps, vec4(projCoords.xyz, directLightIndex));
				float closestDepthDynamic = texture(dynamicShadowMaps, vec4(projCoords, directLightIndex));
				closestDepth = min(closestDepth, closestDepthDynamic);  //TODO: IS this true? Or should i do min?
				float currentDepth = projCoords.z;
				
				if(closestDepth < currentDepth - 0.0005)
				{
					shadow = 0.1;
				}else{
					shadow = 1.0;
				}
			}else if(currLight.type == 2)
			{
				vec3 fragToLight = fragPos - currLight.position.xyz;
				float closestDepth = texture(pointShadowMaps, vec4(fragToLight, pointLightIndex)).r;
				float closestDepthDynamic = texture(dynamicPointShadowMaps, vec4(fragToLight, pointLightIndex)).r;
				closestDepth *= currLight.far_plane;  //Far plane
				closestDepthDynamic *= currLight.far_plane;
				closestDepth = min(closestDepth, closestDepthDynamic);  //TODO: IS this true? Or should i do min?
				float currentDepth = length(fragToLight);
				float bias = 0.005;
				//FragColor = vec4(vec3(closestDepth/currLight.far_plane), 1.0); 
				if(closestDepth < currentDepth - 0.5)
				{
					shadow = 0.1;
				}else{
					shadow = 1.0;
				}
			}
			
		}else
		{
			shadow = 1.0f;
		}
		//shadow = max(0.0f,min(shadow, 1.0f));
        vec3 _illumination = calcRadiance(mat, currLight, normal, fragPos, eyeVec); 
        illumination += shadow*min(max(_illumination,0.0f), 1.0f);

		//Increment Counters 
		if(currLight.type == 1)
		{
			directLightIndex++;
		}else if(currLight.type == 2)
		{
			pointLightIndex++;
		}
    }
    illumination = min(max(illumination,0.0f), 1.0f);
    FragColor = vec4(illumination*diffuse,1);

}

//Light Calc. Funcs
vec3 schlickFresnel(Material material, vec3 lightDir, vec3 halfWay)
{
	vec3 F0;
	if(material.metal)
	{
		F0 = material.color;
	}else{
		F0 = vec3(0.04);
	}
	return F0+(1-F0)*pow(1.0-dot(lightDir, halfWay),5);
}
float geomSchlick(Material material, vec3 normal, float dotProd, float roughness)
{
	float k = (material.roughness+1.0)*(material.roughness+1.0)/8.0;
	//float dotProd = max(dot(normal, view), 0);
	return dotProd/(dotProd*(1-k)+k);
}
float geomSmith(Material material, vec3 normal, vec3 view, vec3 halfway){
	float NdotV = max(dot(normal, view), 0.0f);
	float NdotL = max(dot(normal, halfway), 0.0f);
	float ggx2 = geomSchlick(material, normal, NdotV, material.roughness);
	float ggx1 = geomSchlick(material, normal, NdotL, material.roughness);
	return ggx2;
}

float ggxDistribution(Material material, float nDotH)
{
	float alpha2 = pow(material.roughness,4);
	float d = (nDotH*nDotH)*(alpha2-1)+1;
	return alpha2 / (PI*d*d);
}

vec3 calcRadiance(Material material, Light light, vec3 normal, vec3 fragPos, vec3 viewDir){

	//Shadow Calculation

	vec3 lightDir;
	if(light.type == AMBIENT_LIGHT)
	{
		return min(max(light.color.xyz*light.intensity,0.0f),1.0f);
	}else if(light.type == DIRECTIONAL_LIGHT)
	{
		lightDir = -1*normalize(light.direction.xyz);
		return light.color.xyz*max(dot(lightDir, normal),0);
	}else if(light.type == POINT_LIGHT)
	{
		lightDir = normalize(light.position.xyz - fragPos);
	}else{
		return vec3(0);
	}
	float lightIntensity = light.intensity*100;
	vec3 color = vec3(0.0);
	if(!material.metal){
		color = material.color;
	}
	vec3 halfway = lightDir.xyz+viewDir;
	halfway=halfway/length(halfway); // normalize
	vec3 fresnel = schlickFresnel(material, lightDir, halfway);
	float geo = geomSmith(material, normal, viewDir, halfway);
	float ndf = ggxDistribution(material, dot(normal, halfway));

	vec3 specular = 0.25*fresnel*geo*ndf/(max(dot(normal, lightDir), 0)*max(dot(normal, viewDir), 0));
	vec3 diffuse = light.color.xyz;
	float incomingRadiance = lightIntensity;
	if(light.type == POINT_LIGHT)
	{
		//It isn't a directional light
		float attenuation = pow(length(light.position.xyz-fragPos),2)*light.attenuationFactor;  //TODO: A better attenuation
		incomingRadiance = incomingRadiance/attenuation;
	}
	return (specular*PI + diffuse)*incomingRadiance*dot(normal, lightDir);
}