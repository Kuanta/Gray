#version 420 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aUvs;
layout (location = 4) in ivec4 boneIDs;
layout (location = 5) in vec4 boneWeights;
layout (location = 6) in vec3 aTangent;
layout (location = 8) in vec3 aColor;

out vec3 Normal;
out vec3 FragPos;
out vec2 TexCoords;
out vec3 Color;
out mat3 TBN;
out flat float debug;

layout (std140, binding=0) uniform Matrices
{
	mat4 view;		//16*4 bytes
	mat4 projection;	//16*4 bytes
	vec3 eyePosition;	//16
						//Total: 16*8+16 = 16*9
};

uniform mat4 model;
uniform int hasBones;
const int MAX_BONES=200;
const int NUM_BONES_PER_VERTEX=4;
uniform mat4 gBones[MAX_BONES];


void main()
{
	
	mat4 boneMatrix=mat4(0.0);
	boneMatrix[3][3] = 1.0;
	
	float weights = 0;
	float totalWeights = 0;

	for(int i=0;i<NUM_BONES_PER_VERTEX;i++)
	{
		if(boneIDs[i] >= 0)
		{
			totalWeights += boneWeights[i];
		}
	}
	for(int i=0;i<NUM_BONES_PER_VERTEX;i++)
	{
		if(boneIDs[i] >= 0)
		{
			boneMatrix += gBones[boneIDs[i]]*boneWeights[i] / totalWeights;
		}else{
			break;
		}
	}
	

	gl_Position = projection * view * model * boneMatrix * vec4(aPos, 1.0);
	vec3 tangent = normalize(vec3(model * vec4(aTangent,   0.0)));
	Normal = normalize(vec3(model  * vec4(aNormal,    0.0)));
	
	tangent = normalize(tangent-dot(tangent,Normal)*Normal);
	vec3 bitangent = cross(Normal, tangent);
	TBN = mat3(tangent, bitangent, Normal);
	FragPos=vec3(model*vec4(aPos,1.0));
	TexCoords = aUvs;
	Color = aColor;

	if(totalWeights <= 0.0f)
	{
		debug = 1.0f;
	}else{
		debug = 0.0f;
	}
}