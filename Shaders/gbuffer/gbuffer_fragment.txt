#version 420 core

layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec4 gColors;
layout (location = 3) out vec3 gPbr;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in vec3 Color;
in mat3 TBN;
in flat float debug;

struct Material
{
	vec3 color;
	float shininess;
	bool metal;
	float roughness;
};

layout(binding=0) uniform sampler2D diffuseMap;
layout (binding=1) uniform sampler2D normalMap;
layout (binding=2) uniform sampler2D bumpMap;
layout (binding=3) uniform sampler2D rougnessMap;
uniform Material material;
uniform int containsTexture;
uniform int containsNormalTexture;
uniform int containsRoughnessTexture;

void main()
{
    gPosition = FragPos;
    if(containsTexture == 1)
    {
        gColors.rgb = texture(diffuseMap, TexCoords).rgb;
    }else{
        gColors.rgb = material.color;
    }

    if(debug == 1.0f)
    {
        gColors.rgb = Color;
    }

    gColors.a = 1; //TODO: Implement rougness and metalicness in here, or in an additional texture
    
    vec3 normal;
    if(containsNormalTexture == 1)
    {
        normal = texture(normalMap, TexCoords).rgb;  // Get normal from normal map
		normal = normal * 2.0 - 1.0;
		normal = normalize(TBN * normal);
    }else{
        normal = normalize(Normal);  //Get the normal from the geometry
    }
    gPbr = vec3(0);
    if(containsRoughnessTexture == 1)
    {
        gPbr.r = texture(rougnessMap, TexCoords).r;
    }else{
        gPbr.r = material.roughness;
    }
    gNormal = normalize(normal);

}