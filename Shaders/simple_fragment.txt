#version 420 core
#define PI 3.14
#define MAX_NUM_LIGHTS 100
out vec4 FragColor;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in vec3 Color;
in mat3 TBN;

struct Material
{
	vec3 color;
	float shininess;
	bool metal;
	float roughness;
};

struct AmbientLight
{
	vec3 color;
	float intensity;
};

struct DirectionalLight
{
	vec3 color;
	vec3 direction;
	float intensity;
};

struct PointLight
{
	vec3 color;
	float intensity;
	vec3 position;
	float constant;
	float linear;
	float quadratic;
};


//Light types
const int AMBIENT_LIGHT = 0;
const int DIRECTIONAL_LIGHT = 1;
const int POINT_LIGHT = 2;

struct Light
{
	mat4 lightMatrix;
	vec4 color;		//4*4 = 16
	vec4 position;  //4*4 = 32
	vec4 direction;	//4*4 = 48
	int type;	//4
	float intensity;	//4 
	float constant;	//4
	float linear;	//4
	float quadratic;	//4
	bool castShadow;
	//Total: 48+20 = 68 (Must be a multiple of 16, so ve set it to 16*5=80, LOSS OF 12 BYTES)
};
layout (std140, binding=0) uniform Matrices
{
	mat4 view;		//16*4 bytes
	mat4 projection;	//16*4 bytes
	vec3 eyePosition;	//3*4
						//Total: 16*8+12
};

layout (std140, binding=1) uniform Lights
{
	Light allLights[MAX_NUM_LIGHTS]; //80*MAX_NUM_LIGHTS
	int numLights; //Current number of lights in the scene //4
	//Total: 80*MAX_NUM_LIGHTS+4
};


uniform sampler2D diffuseMap;
uniform Material material;
uniform AmbientLight ambientLight;
uniform DirectionalLight directionalLight;
uniform PointLight pointLight;
uniform int containsTexture;

vec3 calcAmbientLight(AmbientLight light);
vec3 calcDirectionalLight(DirectionalLight light, Material material, vec3 normal,vec3 fragPos,vec3 viewDir);
vec3 calcPointLight(PointLight light, Material material, vec3 normal,vec3 fragPos,vec3 viewDir);
vec3 calcLight(Light light, Material material);

vec3 normal = normalize(Normal);
vec3 viewDir = normalize(eyePosition - FragPos);

void main()
{ 
	if(containsNormalTexture == 1)
	{
		normal = texture(normalMap, TexCoords).rgb;
		normal = normal * 2.0 - 1.0;
		normal = normalize(TBN * normal);
	}
	vec3 lightColor = vec3(0.0f);
	for(int i=0; i<numLights; i++)
	{
		Light currLight = allLights[i];
		lightColor += calcLight(currLight, material);
	}
	//Textures
	if(containsTexture == 1)
	{
		FragColor = texture(diffuseMap, TexCoords) * vec4(lightColor, 1.0);
	}
	else
	{
		FragColor = vec4(material.color,1) * vec4(lightColor, 1.0);
	}

}
vec3 calcLight(Light light, Material material)
{
	vec3 color;
	if(light.type == AMBIENT_LIGHT){
		color += light.color.xyz*light.intensity;

	}else if(light.type == DIRECTIONAL_LIGHT){
		vec3 reflectDir = normalize(reflect(-normalize(light.direction.xyz), normal)); //Bling-Phong
		//Diffuse
		float diffuseFactor = max(dot(normal, -normalize(light.direction.xyz)),0.0f);
		vec3 diffuseColor = light.color.xyz*light.intensity*diffuseFactor;

		//Specular
		float specularFactor = pow(max(dot(-viewDir, reflectDir), 0.0f), material.shininess);
		vec3 specularColor = light.color.xyz*light.intensity*specularFactor;
		color += (diffuseColor + specularColor);

	}else if(light.type == POINT_LIGHT){
		vec3 lightDir = normalize(light.position.xyz - FragPos);
		vec3 halfway = normalize(viewDir+lightDir);  //Blinn-Phong Model
		float diff=max(dot(normal,lightDir),0.0);
		vec3 reflectDir=reflect(-lightDir,normal);

		float spec=pow(max(dot(normal, halfway),0.0),material.shininess);
		float distance=length(light.position.xyz-FragPos);
		float attenuation=1.0/(light.constant+light.linear*distance+light.quadratic*(distance*distance));

		vec3 diffuseColor = light.color.xyz*diff*light.intensity*attenuation;
		vec3 specularColor = light.color.xyz*light.intensity*spec*attenuation;

		color += (diffuseColor+specularColor);
	}
	return color;
}
vec3 calcDirectionalLight(DirectionalLight light, Material material, vec3 normal,vec3 fragPos,vec3 eyePos)
{
	vec3 viewDir = normalize(eyePos - fragPos);
	vec3 reflectDir = normalize(reflect(-normalize(light.direction), normal)); //Bling-Phong

	//Ambient
	vec3 ambientColor; //= light.color*light.intensity;

	//Diffuse
	float diffuseFactor = max(dot(normal, -normalize(light.direction)),0.0f);
	vec3 diffuseColor = light.color*light.intensity*diffuseFactor;

	//Specular
	float specularFactor = pow(max(dot(-viewDir, reflectDir), 0.0f), material.shininess);
	vec3 specularColor = light.color*light.intensity*specularFactor;

	return(ambientColor+diffuseColor+specularColor);
}
vec3 calcPointLight(PointLight light, Material material, vec3 normal,vec3 fragPos,vec3 eyePos)
{
	vec3 viewDir = normalize(eyePos - fragPos);
	vec3 lightDir = normalize(light.position - fragPos);
	vec3 halfway = normalize(viewDir+lightDir);  //Blinn-Phong Model
	vec3 ambientColor,diffuseColor,specularColor;
	float diff=max(dot(normal,lightDir),0.0);
	vec3 reflectDir=reflect(-lightDir,normal);

	//float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
	float spec=pow(max(dot(normal, halfway),0.0),material.shininess);
	float distance=length(light.position-fragPos);
	float attenuation=1.0/(light.constant+light.linear*distance+light.quadratic*(distance*distance));
	
	//ambientColor = light.color*light.intensity*attenuation;
	diffuseColor = light.color*diff*light.intensity*attenuation;
	specularColor = light.color*light.intensity*spec*attenuation;
	
	return(ambientColor+diffuseColor+specularColor);
}
